import json
import os
import sys
import logging # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –º–æ–¥—É–ª—å logging
from typing import List, Dict, Any # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ç–∏–ø–∏ –¥–ª—è –∞–Ω–æ—Ç–∞—Ü—ñ–π

from models import Author, Quote # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –º–æ–¥–µ–ª—ñ
from connect import connect_db # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ –º–æ–¥—É–ª—è
# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–æ–π –∂–µ –±–∞–∑–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç, —â–æ —ñ –≤ connect.py, –∞–ª–µ –º–æ–∂–Ω–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –æ–∫—Ä–µ–º–æ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# 1. –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö MongoDB Atlas
# –¶–µ –¥—É–∂–µ –≤–∞–∂–ª–∏–≤–æ, —â–æ–± —Å–∫—Ä–∏–ø—Ç –º—ñ–≥ –≤–∑–∞—î–º–æ–¥—ñ—è—Ç–∏ –∑ –ë–î
connect_db()

# –®–ª—è—Ö–∏ –¥–æ JSON —Ñ–∞–π–ª—ñ–≤. –¢–µ–ø–µ—Ä –≤–æ–Ω–∏ –≤–∫–∞–∑—É—é—Ç—å –Ω–∞ –ø–∞–ø–∫—É 'data'.
# –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤–Ω–∏–π —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—ñ–≤, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ os.path.join
DATA_FOLDER: str = "data" # –ê–Ω–æ—Ç–∞—Ü—ñ—è —Ç–∏–ø—É
AUTHORS_FILE_PATH: str = os.path.join(DATA_FOLDER, "authors.json") # –ê–Ω–æ—Ç–∞—Ü—ñ—è —Ç–∏–ø—É
QUOTES_FILE_PATH: str = os.path.join(DATA_FOLDER, "quotes.json") # –ê–Ω–æ—Ç–∞—Ü—ñ—è —Ç–∏–ø—É


# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ JSON —Ñ–∞–π–ª—ñ–≤
if not os.path.exists(AUTHORS_FILE_PATH):
    logging.error(f"–ü–æ–º–∏–ª–∫–∞: –§–∞–π–ª {AUTHORS_FILE_PATH} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.") # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ logging.error
    sys.exit(1)

if not os.path.exists(QUOTES_FILE_PATH):
    logging.error(f"–ü–æ–º–∏–ª–∫–∞: –§–∞–π–ª {QUOTES_FILE_PATH} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.") # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ logging.error
    sys.exit(1)

logging.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –∑ {AUTHORS_FILE_PATH} —Ç–∞ {QUOTES_FILE_PATH}...") # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ logging.info

try:
    # 2. –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —Ç–∞ —á–∏—Ç–∞—î–º–æ authors.json
    with open(AUTHORS_FILE_PATH, "r", encoding="utf-8") as f:
        authors_data: List[Dict[str, Any]] = json.load(f) # –ê–Ω–æ—Ç–∞—Ü—ñ—è —Ç–∏–ø—É

    # 3. –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞ –∑ JSON: –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç Author —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –π–æ–≥–æ –≤ –ë–î
    logging.info("–ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∞–≤—Ç–æ—Ä—ñ–≤...") # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ logging.info
    for author_info in authors_data:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∞–≤—Ç–æ—Ä –≤–∂–µ —ñ—Å–Ω—É—î, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
        if not Author.objects(fullname=author_info["fullname"]).first():
            Author(**author_info).save()
            logging.info(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ –∞–≤—Ç–æ—Ä–∞: {author_info['fullname']}") # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ logging.info
        else:
            logging.info(f"–ê–≤—Ç–æ—Ä –≤–∂–µ —ñ—Å–Ω—É—î (–ø—Ä–æ–ø—É—â–µ–Ω–æ): {author_info['fullname']}") # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ logging.info (–±—É–ª–æ –∑–∞–∫–æ–º–µ–Ω—Ç–æ–≤–∞–Ω–æ, –∞–ª–µ –∫–æ—Ä–∏—Å–Ω–æ –¥–ª—è –¥–µ–±–∞–≥—É)
    logging.info("–ê–≤—Ç–æ—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ.") # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ logging.info

    # 4. –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —Ç–∞ —á–∏—Ç–∞—î–º–æ quotes.json
    with open(QUOTES_FILE_PATH, "r", encoding="utf-8") as f:
        quotes_data: List[Dict[str, Any]] = json.load(f) # –ê–Ω–æ—Ç–∞—Ü—ñ—è —Ç–∏–ø—É

    # 5. –î–ª—è –∫–æ–∂–Ω–æ—ó —Ü–∏—Ç–∞—Ç–∏ –∑ JSON:
    logging.info("–ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ü–∏—Ç–∞—Ç–∏...") # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ logging.info
    for quote_info in quotes_data:
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞ –≤ –ë–î –∑–∞ fullname
        author = Author.objects(fullname=quote_info["author"]).first()
        if author:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç Quote, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∑–Ω–∞–π–¥–µ–Ω–∏–π –æ–±'—î–∫—Ç –∞–≤—Ç–æ—Ä–∞
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–∏—Ç–∞—Ç–∞ –≤–∂–µ —ñ—Å–Ω—É—î, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
            if not Quote.objects(quote=quote_info["quote"], author=author).first():
                Quote(
                    quote=quote_info["quote"],
                    tags=quote_info["tags"],
                    author=author
                ).save()
                logging.info(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ —Ü–∏—Ç–∞—Ç—É: '{quote_info['quote']}' –≤—ñ–¥ {quote_info['author']}") # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ logging.info
            else:
                logging.info(f"–¶–∏—Ç–∞—Ç–∞ –≤–∂–µ —ñ—Å–Ω—É—î (–ø—Ä–æ–ø—É—â–µ–Ω–æ): '{quote_info['quote']}'") # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ logging.info (–±—É–ª–æ –∑–∞–∫–æ–º–µ–Ω—Ç–æ–≤–∞–Ω–æ, –∞–ª–µ –∫–æ—Ä–∏—Å–Ω–æ –¥–ª—è –¥–µ–±–∞–≥—É)
        else:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞: –ê–≤—Ç–æ—Ä '{quote_info['author']}' –¥–ª—è —Ü–∏—Ç–∞—Ç–∏ '{quote_info['quote']}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ –ë–î. –¶–∏—Ç–∞—Ç–∞ –Ω–µ –±—É–¥–µ –∑–±–µ—Ä–µ–∂–µ–Ω–∞.") # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ logging.error
    logging.info("–¶–∏—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ.") # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ logging.info

    logging.info("–ü—Ä–æ—Ü–µ—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ! üéâ") # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ logging.info

except json.JSONDecodeError as e:
    logging.error(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è JSON —Ñ–∞–π–ª—É: {e}. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç JSON.") # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ logging.error
    sys.exit(1)
except Exception as e:
    logging.error(f"–í–∏–Ω–∏–∫–ª–∞ –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}") # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ logging.error
    sys.exit(1)
