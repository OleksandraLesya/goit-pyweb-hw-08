import pika
import json
import logging # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –º–æ–¥—É–ª—å –ª–æ–≥—É–≤–∞–Ω–Ω—è
import sys
from typing import Dict, Any, Optional # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ç–∏–ø–∏ –¥–ª—è –∞–Ω–æ—Ç–∞—Ü—ñ–π

from models import Contact # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –º–æ–¥–µ–ª—å Contact
import connect # noqa: –¶–µ–π —ñ–º–ø–æ—Ä—Ç –Ω–∞—à–æ–≥–æ connect.py —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB Atlas
import configparser # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –º–æ–¥—É–ª—å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ –º–æ–¥—É–ª—è
# –¶–µ –¥–æ–∑–≤–æ–ª–∏—Ç—å –≤–∏–≤–æ–¥–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–æ–Ω—Å–æ–ª—å –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Ä—ñ–≤–Ω—è–º–∏ –≤–∞–∂–ª–∏–≤–æ—Å—Ç—ñ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ß–∏—Ç–∞—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑ config.ini
config = configparser.ConfigParser()
config.read('config.ini')

# –û—Ç—Ä–∏–º—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ RabbitMQ –∑ config.ini
rabbit_host: str = config.get('RABBITMQ', 'host')
sms_queue_name: str = config.get('RABBITMQ', 'sms_queue') # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ sms_queue_name

def callback(ch: pika.adapters.blocking_connection.BlockingChannel, method: pika.spec.Basic.Deliver, properties: pika.spec.BasicProperties, body: bytes) -> None:
    """
    –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É, —è–∫–∞ –æ–±—Ä–æ–±–ª—è—î –æ—Ç—Ä–∏–º–∞–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —á–µ—Ä–≥–∏.
    """
    try:
        # –†–æ–∑–ø–∞—Ä—Å–∏–º–æ JSON-—Ä—è–¥–æ–∫ –∑ —Ç—ñ–ª–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Python-—Å–ª–æ–≤–Ω–∏–∫
        contact_data: Dict[str, Any] = json.loads(body)
        contact_id: Optional[str] = contact_data.get("contact_id") # –û—Ç—Ä–∏–º—É—î–º–æ 'contact_id'

        if not contact_id:
            logging.warning(f"–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –º—ñ—Å—Ç–∏—Ç—å 'contact_id': {body.decode('utf-8')}")
            ch.basic_ack(method.delivery_tag) # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            return

        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ–Ω—Ç–∞–∫—Ç —É MongoDB –∑–∞ –π–æ–≥–æ ObjectID
        contact: Optional[Contact] = Contact.objects(id=contact_id).first()

        if contact:
            if not contact.is_sent: # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —â–µ –Ω–µ –±—É–ª–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ
                logging.info(f"üì± –Ü–º—ñ—Ç–∞—Ü—ñ—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è SMS –¥–æ {contact.full_name} –Ω–∞ {contact.phone_number}") # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ phone_number
                # –§—É–Ω–∫—Ü—ñ—è-–∑–∞–≥–ª—É—à–∫–∞: —Ç—É—Ç –º–æ–≥–ª–∞ –± –±—É—Ç–∏ —Ä–µ–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è SMS
                # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∑–∞—Ç—Ä–∏–º–∫–∞ —á–∞—Å—É: time.sleep(1)

                # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ª–µ is_sent –Ω–∞ True –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
                contact.update(is_sent=True)
                logging.info(f"   ‚úÖ –°—Ç–∞—Ç—É—Å SMS –¥–ª—è {contact.full_name} –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ '–Ω–∞–¥—ñ—Å–ª–∞–Ω–æ'.")
            else:
                logging.info(f"   ‚ÑπÔ∏è SMS –¥–ª—è {contact.full_name} –≤–∂–µ –±—É–≤ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏–π —Ä–∞–Ω—ñ—à–µ.")
        else:
            logging.error(f"   ‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –∑ ID {contact_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.")

        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ, —â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ
        ch.basic_ack(method.delivery_tag)

    except json.JSONDecodeError:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è JSON: {body.decode('utf-8')}")
        ch.basic_ack(method.delivery_tag)
    except Exception as e:
        logging.error(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        logging.error(f"   –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {body.decode('utf-8')}")
        ch.basic_ack(method.delivery_tag)


# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ RabbitMQ
try:
    connection: pika.BlockingConnection = pika.BlockingConnection(pika.ConnectionParameters(host=rabbit_host))
    channel: pika.adapters.blocking_connection.BlockingChannel = connection.channel()
    logging.info(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ RabbitMQ –Ω–∞ —Ö–æ—Å—Ç—ñ: {rabbit_host}")
except pika.exceptions.AMQPConnectionError as e:
    logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ RabbitMQ: {e}")
    logging.error("–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ RabbitMQ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —á–µ—Ä–µ–∑ Docker).")
    sys.exit(1)

# –û–≥–æ–ª–æ—à–µ–Ω–Ω—è —á–µ—Ä–≥–∏ (–ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —Ç–∞–∫–æ—é –∂, —è–∫ —ñ –≤ producer)
channel.queue_declare(queue=sms_queue_name, durable=True) # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ sms_queue_name

# –í–∫–∞–∑—É—î–º–æ RabbitMQ, —â–æ —Ü–µ–π consumer –±—É–¥–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –¥–∞–Ω–æ—ó —á–µ—Ä–≥–∏
channel.basic_consume(queue=sms_queue_name, on_message_callback=callback, auto_ack=False)

logging.info(f"\n[*] –û—á—ñ–∫—É–≤–∞–Ω–Ω—è SMS –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ —á–µ—Ä–≥–∏ '{sms_queue_name}'. –î–ª—è –≤–∏—Ö–æ–¥—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å CTRL+C")
# –ó–∞–ø—É—Å–∫–∞—î–º–æ –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∏–π —Ü–∏–∫–ª, —è–∫–∏–π —á–µ–∫–∞—î –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
channel.start_consuming()
